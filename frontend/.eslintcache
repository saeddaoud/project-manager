[{"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\index.js":"1","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\App.js":"2","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\HomeScreen.js":"3","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\LoginScreen.js":"4","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Footer.js":"5","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Header.js":"6","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\store.js":"7","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\RegistrationScreen.js":"8","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\employeeReducers.js":"9","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\employeeConstants.js":"10","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\employeeActions.js":"11","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Message.js":"12","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Spinner.js":"13","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProfileScreen.js":"14","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeProfileScreen.js":"15","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\projectReducers.js":"16","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\projectConstants.js":"17","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\projectActions.js":"18","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProjectScreen.js":"19","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeesScreen.js":"20","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProjectsScreen.js":"21","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\TasksScreen.js":"22","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Projects.js":"23","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeesProjectsScreen.js":"24","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\BackDrop.js":"25","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AddEditProjectForm.js":"26","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Tasks.js":"27","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\taskReducers.js":"28","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\taskConstants.js":"29","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\taskActions.js":"30","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AddEditTaskForm.js":"31","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\TaskScreen.js":"32","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AssignEmployee.js":"33","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeDetailsScreen.js":"34","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Employees.js":"35","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeTaskScreen.js":"36","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeTasksScreen.js":"37"},{"size":300,"mtime":1611358439826,"results":"38","hashOfConfig":"39"},{"size":2277,"mtime":1615335970985,"results":"40","hashOfConfig":"39"},{"size":894,"mtime":1613269815809,"results":"41","hashOfConfig":"39"},{"size":2445,"mtime":1613269823180,"results":"42","hashOfConfig":"39"},{"size":179,"mtime":1611361707674,"results":"43","hashOfConfig":"39"},{"size":5601,"mtime":1615360208725,"results":"44","hashOfConfig":"39"},{"size":2118,"mtime":1615359856933,"results":"45","hashOfConfig":"39"},{"size":2128,"mtime":1613269847614,"results":"46","hashOfConfig":"39"},{"size":2879,"mtime":1614927521210,"results":"47","hashOfConfig":"39"},{"size":1146,"mtime":1612927385249,"results":"48","hashOfConfig":"39"},{"size":5353,"mtime":1613529240807,"results":"49","hashOfConfig":"39"},{"size":151,"mtime":1612237225111,"results":"50","hashOfConfig":"39"},{"size":244,"mtime":1612399766640,"results":"51","hashOfConfig":"39"},{"size":5434,"mtime":1615251161875,"results":"52","hashOfConfig":"39"},{"size":847,"mtime":1613529240808,"results":"53","hashOfConfig":"39"},{"size":3941,"mtime":1613538220047,"results":"54","hashOfConfig":"39"},{"size":1546,"mtime":1613538166517,"results":"55","hashOfConfig":"39"},{"size":8856,"mtime":1615164026771,"results":"56","hashOfConfig":"39"},{"size":6558,"mtime":1615435076040,"results":"57","hashOfConfig":"39"},{"size":141,"mtime":1613267534994,"results":"58","hashOfConfig":"39"},{"size":6819,"mtime":1613537928564,"results":"59","hashOfConfig":"39"},{"size":129,"mtime":1613269849769,"results":"60","hashOfConfig":"39"},{"size":2027,"mtime":1615447460025,"results":"61","hashOfConfig":"39"},{"size":459,"mtime":1613529240809,"results":"62","hashOfConfig":"39"},{"size":133,"mtime":1613372325964,"results":"63","hashOfConfig":"39"},{"size":1760,"mtime":1613825614857,"results":"64","hashOfConfig":"39"},{"size":2019,"mtime":1615360766157,"results":"65","hashOfConfig":"39"},{"size":5141,"mtime":1615359839027,"results":"66","hashOfConfig":"39"},{"size":2163,"mtime":1615359787431,"results":"67","hashOfConfig":"39"},{"size":11490,"mtime":1615436622296,"results":"68","hashOfConfig":"39"},{"size":1677,"mtime":1613826689576,"results":"69","hashOfConfig":"39"},{"size":8004,"mtime":1615083906831,"results":"70","hashOfConfig":"39"},{"size":2766,"mtime":1615083787204,"results":"71","hashOfConfig":"39"},{"size":154,"mtime":1614994668799,"results":"72","hashOfConfig":"39"},{"size":1750,"mtime":1615081756712,"results":"73","hashOfConfig":"39"},{"size":3402,"mtime":1615447008438,"results":"74","hashOfConfig":"39"},{"size":3359,"mtime":1615336693882,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1ncunky",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\index.js",[],["160","161"],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\App.js",["162"],"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport EmployeeDetailsScreen from './screens/EmployeeDetailsScreen';\nimport EmployeeProfileScreen from './screens/EmployeeProfileScreen';\nimport EmployeesProjectsScreen from './screens/EmployeesProjectsScreen';\nimport EmployeesScreen from './screens/EmployeesScreen';\nimport HomeScreen from './screens/HomeScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport ProjectScreen from './screens/ProjectScreen';\nimport ProjectsScreen from './screens/ProjectsScreen';\nimport RegistrationScreen from './screens/RegistrationScreen';\nimport TaskScreen from './screens/TaskScreen';\nimport TasksScreen from './screens/TasksScreen';\nimport EmployeeTaskScreen from './screens/EmployeeTaskScreen';\nimport EmployeeTasksScreen from './screens/EmployeeTasksScreen';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <div className='page'>\n        <Switch>\n          <Route exact path='/' component={HomeScreen} />\n          <Route exact path='/login' component={LoginScreen} />\n          <Route exact path='/signup' component={RegistrationScreen} />\n          <Route exact path='/profile/me' component={ProfileScreen} />\n          <Route exact path='/projects' component={ProjectsScreen} />\n          <Route exact path='/employee/tasks' component={EmployeeTasksScreen} />\n          <Route\n            exact\n            path='/employees/projects'\n            component={EmployeesProjectsScreen}\n          />\n          <Route exact path='/employees' component={EmployeesScreen} />\n          <Route\n            exact\n            path='/admin/employee-details/:id'\n            component={EmployeeDetailsScreen}\n          />\n          <Route exact path='/profile/:id' component={EmployeeProfileScreen} />\n          <Route exact path='/project/:id' component={ProjectScreen} />\n          <Route exact path='/task/:id' component={TaskScreen} />\n          <Route\n            exact\n            path='/employee/task/:id'\n            component={EmployeeTaskScreen}\n          />\n        </Switch>\n      </div>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\HomeScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Header.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\store.js",["163"],"import { applyMiddleware, createStore, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport {\r\n  avatarUpdateReducer,\r\n  employeeFetchReducer,\r\n  employeeLoginReducer,\r\n  employeesListReducer,\r\n  meFetchReducer,\r\n} from './reducers/employeeReducers';\r\nimport {\r\n  projectAddReducer,\r\n  projectDeleteReducer,\r\n  projectFetchReducer,\r\n  projectsFetchReducer,\r\n  projectUpdateReducer,\r\n} from './reducers/projectReducers';\r\nimport {\r\n  myTasksFetchReducer,\r\n  taskAddReducer,\r\n  taskDeleteReducer,\r\n  taskEmployeeAddReducer,\r\n  taskEmployeeRemoveReducer,\r\n  taskEmployeesFetchReducer,\r\n  taskFetchReducer,\r\n  tasksFetchReducer,\r\n  taskStatusUpdateReducer,\r\n  taskUpdateReducer,\r\n} from './reducers/taskReducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nconst reducer = combineReducers({\r\n  employeeLogin: employeeLoginReducer,\r\n  meFetch: meFetchReducer,\r\n  employeeFetch: employeeFetchReducer,\r\n  employeesList: employeesListReducer,\r\n  avatarUpdate: avatarUpdateReducer,\r\n  projectsFetch: projectsFetchReducer,\r\n  projectFetch: projectFetchReducer,\r\n  projectAdd: projectAddReducer,\r\n  projectUpdate: projectUpdateReducer,\r\n  projectDelete: projectDeleteReducer,\r\n  taskAdd: taskAddReducer,\r\n  taskUpdate: taskUpdateReducer,\r\n  taskStatusUpdate: taskStatusUpdateReducer,\r\n  taskFetch: taskFetchReducer,\r\n  taskEmployeeAdd: taskEmployeeAddReducer,\r\n  taskEmployeeRemove: taskEmployeeRemoveReducer,\r\n  tasksFetch: tasksFetchReducer,\r\n  myTasksFetch: myTasksFetchReducer,\r\n  taskDelete: taskDeleteReducer,\r\n});\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo'))\r\n  : null;\r\nconst myDetailsFromStorage = localStorage.getItem('myDetails')\r\n  ? JSON.parse(localStorage.getItem('myDetails'))\r\n  : null;\r\n\r\nconst initialState = {\r\n  employeeLogin: { userInfo: userInfoFromStorage },\r\n  meFetch: {\r\n    user: myDetailsFromStorage,\r\n  },\r\n};\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\RegistrationScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\employeeReducers.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\employeeConstants.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\employeeActions.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Message.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Spinner.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProfileScreen.js",["164","165","166"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { fetchMe, updateAvatar } from '../redux/actions/employeeActions';\r\n\r\nimport Spinner from '../components/Spinner';\r\nimport Message from '../components/Message';\r\nimport { fetchProjects } from '../redux/actions/projectActions';\r\nimport Projects from '../components/Projects';\r\nimport { fetchMyTasks } from '../redux/actions/taskActions';\r\nimport Tasks from '../components/Tasks';\r\n\r\nconst ProfileScreen = () => {\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  const { user, loading: userLoading, error: userError } = useSelector(\r\n    (state) => state.meFetch\r\n  );\r\n  const {\r\n    projects,\r\n    loading: projectsLoading,\r\n    error: projectsError,\r\n  } = useSelector((state) => state.projectsFetch);\r\n  const { tasks, loading: tasksLoading, error: tasksError } = useSelector(\r\n    (state) => state.myTasksFetch\r\n  );\r\n\r\n  // console.log(user, loading);\r\n\r\n  const [avatar, setAvatar] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  // States\r\n  // const { users, loading, success, error } = useSelector(\r\n  //   (state) => state.employeesList\r\n  // );\r\n  // const { projects, loading, error, success } = useSelector(\r\n  //   (state) => state.projectsFetch\r\n  // );\r\n\r\n  // const clickHandler = () => {\r\n  //   console.log('clicked');\r\n  //   dispatch(listEmployees());\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // The if statement is to prevent fetching the logged in user everytime they go to their profile page, since the logged in user's info is already in the state\r\n    if (!user) {\r\n      dispatch(fetchMe());\r\n    }\r\n\r\n    if (user) {\r\n      setAvatar(user.avatar);\r\n    }\r\n\r\n    if (user && user.role !== 'employee') {\r\n      dispatch(fetchProjects({ status: 'active', limit: '3' }));\r\n      // dispatch(fetchProjects());\r\n    }\r\n\r\n    if (user && user.role === 'employee') {\r\n      dispatch(fetchMyTasks({ limit: '3' }));\r\n    }\r\n\r\n    // dispatch(fetchProjects());\r\n  }, [dispatch, user]);\r\n\r\n  const handleAvatarUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('avatar', file);\r\n    setUploading(true);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-date',\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post('/api/v1/upload', formData, config);\r\n      // console.log(data);\r\n      setAvatar(data);\r\n      setUploading(false);\r\n      dispatch(updateAvatar(data));\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      setUploading(false);\r\n    }\r\n  };\r\n  return (\r\n    // <div className='page profile-page'>\r\n    <div className='container flex flex-jcc flex-aifs'>\r\n      {/* <button className='btn m-2' onClick={clickHandler}>\r\n          List Employees\r\n        </button> */}\r\n      {(userLoading || projectsLoading) && <Spinner />}\r\n      {userError && <Message>{userError}</Message>}\r\n      {projectsError && <Message>{projectsError}</Message>}\r\n      {!userLoading && !projectsLoading && user && (\r\n        <div className='display flex flex-fdc my-1'>\r\n          <div className='display__image'>\r\n            <div\r\n              className='image-upload my-1'\r\n              onMouseEnter={() => setHidden(false)}\r\n              onMouseLeave={() => setHidden(true)}\r\n            >\r\n              <img src={avatar} alt='avatar' />\r\n              <form className={hidden ? 'hidden' : 'shown'}>\r\n                <label htmlFor='file-input'>\r\n                  <div>\r\n                    <div>Update</div>\r\n                  </div>\r\n                </label>\r\n\r\n                <input\r\n                  id='file-input'\r\n                  type='file'\r\n                  onChange={handleAvatarUpload}\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className='h-line'></div>\r\n          <div className='display__body'>\r\n            <div className='my-1'>\r\n              <h4>\r\n                Username : <span>{user.name}</span>\r\n              </h4>\r\n              <h4>\r\n                Email : <span>{user.email}</span>\r\n              </h4>\r\n            </div>\r\n          </div>\r\n          <div className='h-line'></div>\r\n          <div className='recent '>\r\n            {user && user.role !== 'employee' ? (\r\n              <div className='recent-projects my-1'>\r\n                <h1>Recent Projects</h1>\r\n              </div>\r\n            ) : (\r\n              <div className='recent-tasks my-1'>\r\n                <h1>Recent Tasks</h1>\r\n              </div>\r\n            )}\r\n            {user.role !== 'employee' && projects && (\r\n              <Projects projects={projects} />\r\n            )}\r\n            {user.role === 'employee' && tasks && <Tasks tasks={tasks} />}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* {projects && (\r\n          <div className='list'>\r\n            <ul>\r\n              {projects.map((project) => (\r\n                <Link key={project._id} to={`/project/${project._id}`}>\r\n                  <li>\r\n                    <h2>{project.name}</h2>\r\n                    <p>{project.description}</p>\r\n                  </li>\r\n                </Link>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )} */}\r\n    </div>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeProfileScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\projectReducers.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\projectConstants.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\projectActions.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProjectScreen.js",["167"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AddEditProjectForm from '../components/AddEditProjectForm';\r\nimport AddEditTaskForm from '../components/AddEditTaskForm';\r\nimport Message from '../components/Message';\r\nimport Spinner from '../components/Spinner';\r\nimport Tasks from '../components/Tasks';\r\nimport {\r\n  fetchProject,\r\n  updateProject,\r\n  fetchTasks,\r\n} from '../redux/actions/projectActions';\r\nimport { addTask } from '../redux/actions/taskActions';\r\n\r\nconst ProjectScreen = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const { project, loading, error } = useSelector(\r\n    (state) => state.projectFetch\r\n  );\r\n  const { tasks, loading: tasksLoading, error: tasksError } = useSelector(\r\n    (state) => state.tasksFetch\r\n  );\r\n  const { success: addTaskSuccess } = useSelector((state) => state.taskAdd);\r\n  const { success: deleteTaskSuccess } = useSelector(\r\n    (state) => state.taskDelete\r\n  );\r\n\r\n  const [projectName, setProjectName] = useState('');\r\n  const [projectDescription, setProjectDescription] = useState('');\r\n  const [projectNameError, setProjectNameError] = useState('');\r\n  const [projectDescriptionError, setProjectDescriptionError] = useState('');\r\n  const [showProjectForm, setShowProjectForm] = useState(false);\r\n\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n  const [taskNameError, setTaskNameError] = useState('');\r\n  const [taskDescriptionError, setTaskDescriptionError] = useState('');\r\n  const [showTaskForm, setShowTaskForm] = useState(false);\r\n\r\n  const id = match.params.id;\r\n\r\n  // console.log(project, projectName, projectDescription);\r\n\r\n  useEffect(() => {\r\n    if (project) {\r\n      setProjectName(project.name);\r\n      setProjectDescription(project.description);\r\n      dispatch(fetchTasks(project._id));\r\n    }\r\n  }, [project]);\r\n\r\n  useEffect(() => {\r\n    // if (project) {\r\n    //   setProjectName(projectName);\r\n    //   setProjectDescription(projectDescription);\r\n    // }\r\n    dispatch(fetchProject(id));\r\n  }, [dispatch, id, addTaskSuccess, deleteTaskSuccess]);\r\n\r\n  const addTaskHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (taskName !== '' && taskDescription !== '') {\r\n      dispatch(\r\n        addTask({\r\n          project: project._id,\r\n          name: taskName,\r\n          description: taskDescription,\r\n        })\r\n      );\r\n      setTaskNameError('');\r\n      setTaskDescriptionError('');\r\n      setTaskName('');\r\n      setTaskDescription('');\r\n      setShowTaskForm(false);\r\n    } else {\r\n      if (taskName === '') {\r\n        setTaskNameError(\"Task's name is required\");\r\n      }\r\n      if (taskDescription === '') {\r\n        setTaskDescriptionError(\"Task's decsription is required\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const editProjectHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (projectName !== '' && projectDescription !== '') {\r\n      dispatch(\r\n        updateProject({\r\n          projectId: project._id,\r\n          name: projectName,\r\n          description: projectDescription,\r\n        })\r\n      );\r\n      setProjectNameError('');\r\n      setProjectDescriptionError('');\r\n      setProjectName('');\r\n      setProjectDescription('');\r\n      setShowProjectForm(false);\r\n    } else {\r\n      if (projectName === '') {\r\n        setProjectNameError(\"Project's name is required\");\r\n      }\r\n      if (projectDescription === '') {\r\n        setProjectDescriptionError(\"Project's decsription is required\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // <div className='page profile-page'>\r\n    <div className='container'>\r\n      {showProjectForm && (\r\n        <AddEditProjectForm\r\n          setProjectName={setProjectName}\r\n          projectName={projectName}\r\n          projectNameError={projectNameError}\r\n          setProjectDescription={setProjectDescription}\r\n          projectDescription={projectDescription}\r\n          projectDescriptionError={projectDescriptionError}\r\n          setShowProjectForm={setShowProjectForm}\r\n          addProjectHandler={editProjectHandler}\r\n          edit={true}\r\n        />\r\n      )}\r\n      {showTaskForm && (\r\n        <AddEditTaskForm\r\n          setTaskName={setTaskName}\r\n          taskName={taskName}\r\n          taskNameError={taskNameError}\r\n          setTaskDescription={setTaskDescription}\r\n          taskDescription={taskDescription}\r\n          taskDescriptionError={taskDescriptionError}\r\n          setShowTaskForm={setShowTaskForm}\r\n          addTaskHandler={addTaskHandler}\r\n        />\r\n      )}\r\n      <div className='add-container my-1 flex flex-jcsa'>\r\n        <div\r\n          className='add-container__btn'\r\n          // onClick={() => setShowAddProjectForm(true)}\r\n        >\r\n          <div\r\n            className='btn btn--dark'\r\n            onClick={() => setShowProjectForm(true)}\r\n          >\r\n            <i className='far fa-edit'></i> Edit Project\r\n          </div>\r\n          {/* <i className='far fa-plus-square'></i> */}\r\n        </div>\r\n        <div\r\n          className='add-container__btn'\r\n          // onClick={() => setShowAddProjectForm(true)}\r\n        >\r\n          <div className='btn btn--dark' onClick={() => setShowTaskForm(true)}>\r\n            <i className='fas fa-plus'></i> Add Task\r\n          </div>\r\n          {/* <i className='far fa-plus-square'></i> */}\r\n        </div>\r\n      </div>\r\n      {loading && <Spinner />}\r\n      {error && <Message>{error}</Message>}\r\n      {project && (\r\n        <div className='project-details flex flex-fdc'>\r\n          <div className='project-summary'>\r\n            <div className='project-summary__item project-summary__item--title'>\r\n              <h3>Project's Summary</h3>\r\n            </div>\r\n            <div className='project-summary__item project-summary__item--name'>\r\n              {project.name}\r\n            </div>\r\n            <div className='project-summary__item project-summary__item--desc'>\r\n              {project.description}\r\n            </div>\r\n          </div>\r\n          <div className='h-line'></div>\r\n          <div className='project-tasks'>\r\n            <div className='project-tasks__title my-1'>\r\n              <h4>Project's Tasks</h4>\r\n            </div>\r\n            <div className='project-tasks__list'>\r\n              {tasksLoading && <Spinner />}\r\n              {tasksError && <Message>{tasksError}</Message>}\r\n              {tasks && <Tasks tasks={tasks} />}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default ProjectScreen;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeesScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\ProjectsScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\TasksScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Projects.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeesProjectsScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\BackDrop.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AddEditProjectForm.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Tasks.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\reducers\\taskReducers.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\constants\\taskConstants.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\redux\\actions\\taskActions.js",["168","169","170"],"import axios from 'axios';\r\n\r\nimport {\r\n  MY_TASKS_FETCH_FAIL,\r\n  MY_TASKS_FETCH_REQUEST,\r\n  MY_TASKS_FETCH_SUCCESS,\r\n  TASKS_FETCH_FAIL,\r\n  TASKS_FETCH_REQUEST,\r\n  TASKS_FETCH_SUCCESS,\r\n  TASK_ADD_FAIL,\r\n  TASK_ADD_REQUEST,\r\n  TASK_ADD_SUCCESS,\r\n  TASK_DELETE_FAIL,\r\n  TASK_DELETE_REQUEST,\r\n  TASK_DELETE_SUCCESS,\r\n  TASK_EMPLOYEE_ADD_FAIL,\r\n  TASK_EMPLOYEE_ADD_REQUEST,\r\n  TASK_EMPLOYEE_ADD_SUCCESS,\r\n  TASK_EMPLOYEE_REMOVE_FAIL,\r\n  TASK_EMPLOYEE_REMOVE_REQUEST,\r\n  TASK_EMPLOYEE_REMOVE_SUCCESS,\r\n  TASK_FETCH_FAIL,\r\n  TASK_FETCH_REQUEST,\r\n  TASK_FETCH_SUCCESS,\r\n  TASK_STATUS_UPDATE_FAIL,\r\n  TASK_STATUS_UPDATE_REQUEST,\r\n  TASK_STATUS_UPDATE_SUCCESS,\r\n  TASK_UPDATE_FAIL,\r\n  TASK_UPDATE_REQUEST,\r\n  TASK_UPDATE_SUCCESS,\r\n} from '../constants/taskConstants';\r\n\r\nimport { PROJECT_FETCH_SUCCESS } from '../constants/projectConstants';\r\n\r\nexport const addTask = (task) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: TASK_ADD_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      `/api/v1/projects/${task.project}/tasks`,\r\n      task,\r\n      config\r\n    );\r\n\r\n    let tasks = getState().tasksFetch.tasks;\r\n\r\n    tasks.unshift(data.data);\r\n\r\n    console.log(tasks, data);\r\n\r\n    dispatch({\r\n      type: TASK_ADD_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    dispatch({\r\n      type: TASKS_FETCH_SUCCESS,\r\n      payload: { success: true, data: tasks },\r\n    });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_ADD_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateTask = (task) => async (dispatch, getState) => {\r\n  const { taskId, ...taskBody } = task;\r\n  console.log(taskId, taskBody);\r\n  try {\r\n    dispatch({\r\n      type: TASK_UPDATE_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/v1/tasks/${taskId}`,\r\n      taskBody,\r\n      config\r\n    );\r\n\r\n    // let project = getState().projectFetch.project;\r\n\r\n    // project.tasks = project.tasks.map((xtask) => {\r\n    //   console.log(xtask._id.toString(), taskId.toString());\r\n    //   return xtask._id.toString() === taskId.toString() ? data.data : xtask;\r\n    // });\r\n\r\n    // console.log(project);\r\n\r\n    dispatch({\r\n      type: TASK_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    // dispatch({\r\n    //   type: TASK_FETCH_SUCCESS,\r\n    //   payload: data,\r\n    // });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateTaskStatus = ({ taskId, status }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  // const { taskId, ...taskBody } = task;\r\n  console.log(taskId, status);\r\n  try {\r\n    dispatch({\r\n      type: TASK_STATUS_UPDATE_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/v1/tasks/${taskId}/status`,\r\n      { status },\r\n      config\r\n    );\r\n\r\n    console.log(data);\r\n\r\n    // let project = getState().projectFetch.project;\r\n\r\n    // project.tasks = project.tasks.map((xtask) => {\r\n    //   console.log(xtask._id.toString(), taskId.toString());\r\n    //   return xtask._id.toString() === taskId.toString() ? data.data : xtask;\r\n    // });\r\n\r\n    // console.log(project);\r\n\r\n    dispatch({\r\n      type: TASK_STATUS_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    // dispatch({\r\n    //   type: TASK_FETCH_SUCCESS,\r\n    //   payload: data,\r\n    // });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_STATUS_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchTask = (taskId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: TASK_FETCH_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/v1/tasks/${taskId}`, config);\r\n\r\n    // let project = getState().projectFetch.project;\r\n\r\n    // project.tasks.unshift(data.data);\r\n\r\n    dispatch({\r\n      type: TASK_FETCH_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    // dispatch({\r\n    //   type: PROJECT_FETCH_SUCCESS,\r\n    //   payload: { success: true, data: project },\r\n    // });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// fetchMyTasks can take an argument queryOptions as an object with three possible properties' names: keyword, status, and limit.\r\n\r\nexport const fetchMyTasks = (queryOptions) => async (dispatch, getState) => {\r\n  const keyword = queryOptions?.keyword;\r\n  const limit = queryOptions?.limit;\r\n  const status = queryOptions?.status;\r\n\r\n  // console.log(keyword, limit, status);\r\n\r\n  let query = [];\r\n\r\n  if (keyword) {\r\n    query.push(`keyword=${keyword}`);\r\n  } else {\r\n    if (status) {\r\n      query.push(`status=${status}`);\r\n    }\r\n    if (limit) {\r\n      query.push(`limit=${limit}`);\r\n    }\r\n  }\r\n\r\n  // console.log(query);\r\n\r\n  try {\r\n    dispatch({\r\n      type: MY_TASKS_FETCH_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } =\r\n      query.length > 0\r\n        ? await axios.get(\r\n            `/api/v1/tasks?${query.join(',').replace(',', '&')}`,\r\n            config\r\n          )\r\n        : await axios.get(`/api/v1/tasks`, config);\r\n\r\n    dispatch({\r\n      type: MY_TASKS_FETCH_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error.response.data.error);\r\n    dispatch({\r\n      type: MY_TASKS_FETCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addEmployeeToTask = ({ taskId, employeeToAddToTask }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_ADD_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/v1/tasks/${taskId}/employee/add`,\r\n      { employeeToAddToTask },\r\n      config\r\n    );\r\n\r\n    // let project = getState().projectFetch.project;\r\n\r\n    // project.tasks.unshift(data.data);\r\n\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_ADD_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    // dispatch({\r\n    //   type: PROJECT_EMPLOYEE_ADD_SUCCESS,\r\n    //   payload: { success: true, data: project },\r\n    // });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_ADD_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const removeEmployeeFromTask = ({\r\n  taskId,\r\n  employeeToRemoveFromTask,\r\n}) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_REMOVE_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/v1/tasks/${taskId}/employee/remove`,\r\n      { employeeToRemoveFromTask },\r\n      config\r\n    );\r\n\r\n    // let project = getState().projectFetch.project;\r\n\r\n    // project.tasks.unshift(data.data);\r\n\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_REMOVE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    // dispatch({\r\n    //   type: PROJECT_EMPLOYEE_REMOVE_SUCCESS,\r\n    //   payload: { success: true, data: project },\r\n    // });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_EMPLOYEE_REMOVE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteTask = (taskId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: TASK_DELETE_REQUEST,\r\n    });\r\n\r\n    let token = getState().employeeLogin.userInfo.token;\r\n    token = `Bearer ${token}`;\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/v1/tasks/${taskId}`, config);\r\n\r\n    let tasks = getState().tasksFetch.tasks;\r\n\r\n    tasks = tasks.filter(\r\n      (taskItem) => taskItem._id.toString() !== taskId.toString()\r\n    );\r\n\r\n    dispatch({\r\n      type: TASK_DELETE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // updata projects in the frontend by deleting the task from tasks without fetching the project with its tasks again from the backend\r\n    dispatch({\r\n      type: TASKS_FETCH_SUCCESS,\r\n      payload: { success: true, data: tasks },\r\n    });\r\n  } catch (error) {\r\n    // console.log(error.response.data.error);\r\n    dispatch({\r\n      type: TASK_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.error\r\n          ? error.response.data.error\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AddEditTaskForm.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\TaskScreen.js",["171","172","173","174","175","176","177","178"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport AddEditProjectForm from '../components/AddEditProjectForm';\r\nimport AddEditTaskForm from '../components/AddEditTaskForm';\r\nimport Message from '../components/Message';\r\nimport Spinner from '../components/Spinner';\r\nimport Tasks from '../components/Tasks';\r\nimport AssignEmployee from '../components/AssignEmployee';\r\nimport {\r\n  fetchProject,\r\n  updateProject,\r\n  fetchProjects,\r\n} from '../redux/actions/projectActions';\r\nimport { addTask, fetchTask, updateTask } from '../redux/actions/taskActions';\r\nimport Employees from '../components/Employees';\r\n\r\nconst TaskScreen = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const { task, loading, error } = useSelector((state) => state.taskFetch);\r\n  const {\r\n    loading: addEmployeeLoading,\r\n    error: addEmployeeError,\r\n    success: addEmployeeSuccess,\r\n  } = useSelector((state) => state.taskEmployeeAdd);\r\n  const {\r\n    loading: removeEmployeeLoading,\r\n    error: removeEmployeeError,\r\n    success: removeEmployeeSuccess,\r\n  } = useSelector((state) => state.taskEmployeeRemove);\r\n  const { success } = useSelector((state) => state.taskUpdate);\r\n  // const { project } = useSelector((state) => state.projectFetch);\r\n  // const { projects } = useSelector((state) => state.projectsFetch);\r\n\r\n  //   const [employeeName, setEmployeeName] = useState('');\r\n  //   const [employeeDescription, setEmployeeDescription] = useState('');\r\n  //   const [employeeNameError, setEmployeeNameError] = useState('');\r\n  //   const [employeeDescriptionError, setEmployeeDescriptionError] = useState('');\r\n  //   const [showEmployeeForm, setShowEmployeeForm] = useState(false);\r\n\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n  const [taskNameError, setTaskNameError] = useState('');\r\n  const [taskDescriptionError, setTaskDescriptionError] = useState('');\r\n  const [showTaskForm, setShowTaskForm] = useState(false);\r\n  const [showEmployeesList, setShowEmployeesList] = useState(false);\r\n\r\n  const id = match.params.id;\r\n\r\n  // console.log(project, projectName, projectDescription);\r\n\r\n  useEffect(() => {\r\n    if (task) {\r\n      setTaskName(task.name);\r\n      setTaskDescription(task.description);\r\n    }\r\n  }, [task]);\r\n\r\n  useEffect(() => {\r\n    // if (project) {\r\n    //   setProjectName(projectName);\r\n    //   setProjectDescription(projectDescription);\r\n    // }\r\n    dispatch(fetchTask(id));\r\n  }, [dispatch, id, success, addEmployeeSuccess, removeEmployeeSuccess]);\r\n\r\n  //   const addEmployeeHandler = (e) => {\r\n  //     e.preventDefault();\r\n\r\n  //     if (employeeName !== '' && employeeDescription !== '') {\r\n  //       dispatch(\r\n  //         addEmployee({\r\n  //           project: project._id,\r\n  //           name: employeeName,\r\n  //           description: employeeDescription,\r\n  //         })\r\n  //       );\r\n  //       setEmployeeNameError('');\r\n  //       setEmployeeDescriptionError('');\r\n  //       setEmployeeName('');\r\n  //       setEmployeeDescription('');\r\n  //       setShowEmployeeForm(false);\r\n  //     } else {\r\n  //       if (employeeName === '') {\r\n  //         setEmployeeNameError(\"Employee's name is required\");\r\n  //       }\r\n  //       if (employeeDescription === '') {\r\n  //         setEmployeeDescriptionError(\"Employee's decsription is required\");\r\n  //       }\r\n  //     }\r\n  //   };\r\n\r\n  const editTaskHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (taskName !== '' && taskDescription !== '') {\r\n      dispatch(\r\n        updateTask({\r\n          taskId: task._id,\r\n          name: taskName,\r\n          description: taskDescription,\r\n        })\r\n      );\r\n      setTaskNameError('');\r\n      setTaskDescriptionError('');\r\n      setTaskName('');\r\n      setTaskDescription('');\r\n      setShowTaskForm(false);\r\n    } else {\r\n      if (taskName === '') {\r\n        setTaskNameError(\"Task's name is required\");\r\n      }\r\n      if (taskDescription === '') {\r\n        setTaskDescriptionError(\"Task's decsription is required\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // <div className='page profile-page'>\r\n    <div className='container'>\r\n      {/* {showProjectForm && (\r\n        <AddEditProjectForm\r\n          setProjectName={setProjectName}\r\n          projectName={projectName}\r\n          projectNameError={projectNameError}\r\n          setProjectDescription={setProjectDescription}\r\n          projectDescription={projectDescription}\r\n          projectDescriptionError={projectDescriptionError}\r\n          setShowProjectForm={setShowProjectForm}\r\n          addProjectHandler={editProjectHandler}\r\n          edit={true}\r\n        />\r\n      )} */}\r\n      {showTaskForm && (\r\n        <AddEditTaskForm\r\n          setTaskName={setTaskName}\r\n          taskName={taskName}\r\n          taskNameError={taskNameError}\r\n          setTaskDescription={setTaskDescription}\r\n          taskDescription={taskDescription}\r\n          taskDescriptionError={taskDescriptionError}\r\n          setShowTaskForm={setShowTaskForm}\r\n          addTaskHandler={editTaskHandler}\r\n          edit={true}\r\n        />\r\n      )}\r\n      {showEmployeesList && task && (\r\n        <AssignEmployee\r\n          setShowEmployeesList={setShowEmployeesList}\r\n          task={task}\r\n        />\r\n      )}\r\n      <div className='add-container my-1 flex flex-jcsa'>\r\n        <div\r\n          className='add-container__btn'\r\n          // onClick={() => setShowAddProjectForm(true)}\r\n        >\r\n          <div className='btn btn--dark' onClick={() => setShowTaskForm(true)}>\r\n            <i className='far fa-edit'></i> Edit Task\r\n          </div>\r\n          {/* <i className='far fa-plus-square'></i> */}\r\n        </div>\r\n        <div\r\n          className='add-container__btn'\r\n          // onClick={() => setShowAddProjectForm(true)}\r\n        >\r\n          <div\r\n            className='btn btn--dark'\r\n            onClick={() => setShowEmployeesList(true)}\r\n            //   onClick={() => setShowTaskForm(true)}\r\n          >\r\n            <i className='fas fa-plus'></i>/<i className='fas fa-minus'></i>\r\n            {'  '}\r\n            Employee\r\n          </div>\r\n          {/* <i className='far fa-plus-square'></i> */}\r\n        </div>\r\n      </div>\r\n      {loading && <Spinner />}\r\n      {error && <Message>{error}</Message>}\r\n      {task && (\r\n        <div className='project-details flex flex-fdc'>\r\n          <div className='project-summary'>\r\n            <div className='project-summary__item project-summary__item--title'>\r\n              <h3>Task's Summary</h3>\r\n            </div>\r\n\r\n            <div\r\n              className='project-summary__item project-summary__item--name flex'\r\n              style={{ width: '30%' }}\r\n            >\r\n              {task.project.name}{' '}\r\n              <Link to={`/project/${task.project._id}`}>\r\n                <div className='action-btn action-btn__link'>\r\n                  <i className='fas fa-external-link-alt'></i>{' '}\r\n                </div>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className='project-summary__item project-summary__item--name'>\r\n              {task.name}\r\n            </div>\r\n            <div className='project-summary__item project-summary__item--desc'>\r\n              {task.description}\r\n            </div>\r\n          </div>\r\n          <div className='h-line'></div>\r\n          <div className='project-tasks'>\r\n            <div className='project-tasks__title my-1'>\r\n              <h4>Task's Employees</h4>\r\n            </div>\r\n            <div className='project-tasks__list'>\r\n              {addEmployeeLoading && <Spinner />}\r\n              {addEmployeeError && <Message>{addEmployeeError}</Message>}\r\n              <Employees employees={task.employee} />\r\n              {/* <Tasks tasks={project.tasks} /> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default TaskScreen;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\AssignEmployee.js",["179"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { listEmployees } from '../redux/actions/employeeActions';\r\n\r\nimport Spinner from '../components/Spinner';\r\nimport Message from '../components/Message';\r\nimport {\r\n  addEmployeeToTask,\r\n  removeEmployeeFromTask,\r\n} from '../redux/actions/taskActions';\r\n\r\nconst AssignEmployee = ({ setShowEmployeesList, task }) => {\r\n  const dispatch = useDispatch();\r\n  const { employees, error, loading } = useSelector(\r\n    (state) => state.employeesList\r\n  );\r\n  // const { success: addEmployeeSuccess } = useSelector(\r\n  //   (state) => state.taskEmployeeAdd\r\n  // );\r\n  // const { success: removeEmployeeSuccess } = useSelector(\r\n  //   (state) => state.taskEmployeeRemove\r\n  // );\r\n\r\n  // console.log(task.employee, employees);\r\n\r\n  useEffect(() => {\r\n    dispatch(listEmployees());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* <BackDrop /> */}\r\n      {loading && <Spinner />}\r\n      {error && <Message>{error}</Message>}\r\n      <div className='employees-list-container'>\r\n        <div\r\n          className='employees-list-container__close'\r\n          onClick={() => setShowEmployeesList(false)}\r\n        >\r\n          <i className='far fa-times-circle'></i>\r\n        </div>\r\n        <ul className='employees-list'>\r\n          {employees &&\r\n            employees.map(\r\n              (employee) =>\r\n                employee.role === 'employee' && (\r\n                  <li className='employees-list__item flex' key={employee._id}>\r\n                    <div className='name'>{employee.name}</div>\r\n                    <button\r\n                      className='btn'\r\n                      onClick={() => {\r\n                        task.employee.map((x) => x._id).includes(employee._id)\r\n                          ? dispatch(\r\n                              removeEmployeeFromTask({\r\n                                taskId: task._id,\r\n                                employeeToRemoveFromTask: employee._id,\r\n                              })\r\n                            )\r\n                          : dispatch(\r\n                              addEmployeeToTask({\r\n                                taskId: task._id,\r\n                                employeeToAddToTask: employee._id,\r\n                              })\r\n                            );\r\n                        setShowEmployeesList(false);\r\n                      }}\r\n                    >\r\n                      {task.employee.map((x) => x._id).includes(employee._id)\r\n                        ? 'Remove'\r\n                        : 'Assign'}\r\n                    </button>\r\n                  </li>\r\n                )\r\n            )}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssignEmployee;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeDetailsScreen.js",[],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\components\\Employees.js",["180","181","182"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteTask } from '../redux/actions/taskActions';\r\n\r\nconst Employees = ({ employees }) => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.meFetch);\r\n  // console.log(projects);\r\n  return (\r\n    <ul className='task-employees-list'>\r\n      {employees.map((employee) => (\r\n        // <Link to={`/project/${project._id}`} key={project._id}>\r\n        <li key={employee._id}>\r\n          <div className='flex'>\r\n            <div>{employee.name}</div>\r\n            {/* <div>{task.status}</div> */}\r\n            {/* {user && (user.role === 'manager' || user.role === 'supervisor') && ( */}\r\n            <div className='action-btns flex'>\r\n              {/* <div\r\n                  className='action-btn action-btn__delete'\r\n                  onClick={() => dispatch(deleteTask(task._id))}\r\n                >\r\n                  <i className='far fa-trash-alt'></i>\r\n                </div> */}\r\n\r\n              {/* <div className='action-btn action-btn__edit'>\r\n                  <i className='far fa-edit'></i>\r\n                </div> */}\r\n\r\n              <Link to={`/admin/employee-details/${employee._id}`}>\r\n                <div className='action-btn action-btn__link'>\r\n                  <i className='fas fa-external-link-alt'></i>{' '}\r\n                </div>\r\n              </Link>\r\n            </div>\r\n            {/* )\r\n            } */}\r\n          </div>\r\n          {/* <div className='flex'>\r\n            <div>Status</div>\r\n            <div>Employee</div>\r\n          </div> */}\r\n        </li>\r\n        // </Link>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Employees;\r\n","C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeTaskScreen.js",["183","184","185"],"C:\\Users\\14385\\Desktop\\Personal Projects\\project-manager\\frontend\\src\\screens\\EmployeeTasksScreen.js",["186"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Spinner from '../components/Spinner';\r\nimport Message from '../components/Message';\r\nimport { fetchMyTasks } from '../redux/actions/taskActions';\r\nimport Tasks from '../components/Tasks';\r\n// import BackDrop from '../components/BackDrop';\r\n\r\nconst EmployeeTasksScreen = () => {\r\n  // const history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.meFetch);\r\n  // console.log(user);\r\n  const { tasks, error, loading } = useSelector((state) => state.myTasksFetch);\r\n\r\n  // console.log(projects);\r\n\r\n  const [keyword1, setKeyword1] = useState('');\r\n  const [keyword, setKeyword] = useState('');\r\n  const [status, setStatus] = useState('all');\r\n\r\n  useEffect(() => {\r\n    if (keyword !== '') {\r\n      dispatch(fetchMyTasks({ keyword }));\r\n      setKeyword('');\r\n    } else if (status === 'all') {\r\n      dispatch(fetchMyTasks({}));\r\n    } else {\r\n      dispatch(fetchMyTasks({ status }));\r\n    }\r\n  }, [keyword, status, dispatch]);\r\n\r\n  const searchTaskssHandler = (e) => {\r\n    e.preventDefault();\r\n    setKeyword(keyword1);\r\n    setKeyword1('');\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='actions flex flex-aife flex-fdc my-1'>\r\n        <div className='flex flex-aife' style={{ width: '100%' }}>\r\n          <div className='search'>\r\n            <form\r\n              onSubmit={searchTaskssHandler}\r\n              className='form flex flex-fdc flex-jcsa'\r\n              style={{\r\n                minHeight: '25px',\r\n                width: '100%',\r\n                border: 'none',\r\n                padding: '0',\r\n                boxShadow: 'none',\r\n                borderRadius: '0',\r\n                borderBottom: '1px solid black',\r\n              }}\r\n            >\r\n              {/* <div\r\n                className='input-control'\r\n                style={{\r\n                  height: '30px',\r\n                  marginBottom: '0',\r\n                  width: '100%',\r\n                }}\r\n              > */}\r\n              {/* <label>Keyword</label> */}\r\n              <input\r\n                style={{ top: '15px', width: '100%' }}\r\n                type='text'\r\n                placeholder='Search Tasks'\r\n                value={keyword1}\r\n                onChange={(e) => setKeyword1(e.target.value)}\r\n              />\r\n              {/* </div> */}\r\n            </form>\r\n          </div>\r\n          <div className='filter'>\r\n            <select\r\n              name='status'\r\n              value={status}\r\n              onChange={(e) => setStatus(e.target.value)}\r\n            >\r\n              <option value='all'>All</option>\r\n              <option value='not started'>Not Started</option>\r\n              <option value='in progress'>In Progress</option>\r\n              <option value='aborted'>Aborted</option>\r\n              <option value='paused'>Paused</option>\r\n              <option value='completed'>Completed</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {loading && <Spinner />}\r\n      {error && <Message>{error}</Message>}\r\n      <div className='display-projects flex flex-aifs flex-fdc'>\r\n        {tasks && <Tasks tasks={tasks} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeTasksScreen;\r\n",{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":15,"column":8,"nodeType":"193","messageId":"194","endLine":15,"endColumn":19},{"ruleId":"191","severity":1,"message":"195","line":24,"column":3,"nodeType":"193","messageId":"194","endLine":24,"endColumn":28},{"ruleId":"191","severity":1,"message":"196","line":24,"column":27,"nodeType":"193","messageId":"194","endLine":24,"endColumn":39},{"ruleId":"191","severity":1,"message":"197","line":24,"column":48,"nodeType":"193","messageId":"194","endLine":24,"endColumn":58},{"ruleId":"191","severity":1,"message":"198","line":31,"column":10,"nodeType":"193","messageId":"194","endLine":31,"endColumn":19},{"ruleId":"199","severity":1,"message":"200","line":50,"column":6,"nodeType":"201","endLine":50,"endColumn":15,"suggestions":"202"},{"ruleId":"191","severity":1,"message":"203","line":7,"column":3,"nodeType":"193","messageId":"194","endLine":7,"endColumn":19},{"ruleId":"191","severity":1,"message":"204","line":8,"column":3,"nodeType":"193","messageId":"194","endLine":8,"endColumn":22},{"ruleId":"191","severity":1,"message":"205","line":33,"column":10,"nodeType":"193","messageId":"194","endLine":33,"endColumn":31},{"ruleId":"191","severity":1,"message":"206","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":26},{"ruleId":"191","severity":1,"message":"207","line":8,"column":8,"nodeType":"193","messageId":"194","endLine":8,"endColumn":13},{"ruleId":"191","severity":1,"message":"208","line":11,"column":3,"nodeType":"193","messageId":"194","endLine":11,"endColumn":15},{"ruleId":"191","severity":1,"message":"209","line":12,"column":3,"nodeType":"193","messageId":"194","endLine":12,"endColumn":16},{"ruleId":"191","severity":1,"message":"210","line":13,"column":3,"nodeType":"193","messageId":"194","endLine":13,"endColumn":16},{"ruleId":"191","severity":1,"message":"211","line":15,"column":10,"nodeType":"193","messageId":"194","endLine":15,"endColumn":17},{"ruleId":"191","severity":1,"message":"212","line":27,"column":14,"nodeType":"193","messageId":"194","endLine":27,"endColumn":35},{"ruleId":"191","severity":1,"message":"213","line":28,"column":12,"nodeType":"193","messageId":"194","endLine":28,"endColumn":31},{"ruleId":"199","severity":1,"message":"200","line":28,"column":6,"nodeType":"201","endLine":28,"endColumn":8,"suggestions":"214"},{"ruleId":"191","severity":1,"message":"215","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":20},{"ruleId":"191","severity":1,"message":"216","line":7,"column":9,"nodeType":"193","messageId":"194","endLine":7,"endColumn":17},{"ruleId":"191","severity":1,"message":"217","line":8,"column":11,"nodeType":"193","messageId":"194","endLine":8,"endColumn":15},{"ruleId":"191","severity":1,"message":"218","line":7,"column":3,"nodeType":"193","messageId":"194","endLine":7,"endColumn":13},{"ruleId":"199","severity":1,"message":"219","line":33,"column":6,"nodeType":"201","endLine":33,"endColumn":14,"suggestions":"220"},{"ruleId":"199","severity":1,"message":"221","line":43,"column":6,"nodeType":"201","endLine":43,"endColumn":8,"suggestions":"222"},{"ruleId":"191","severity":1,"message":"217","line":14,"column":11,"nodeType":"193","messageId":"194","endLine":14,"endColumn":15},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"no-unused-vars","'TasksScreen' is defined but never used.","Identifier","unusedVar","'taskEmployeesFetchReducer' is defined but never used.","'tasksLoading' is assigned a value but never used.","'tasksError' is assigned a value but never used.","'uploading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["225"],"'TASKS_FETCH_FAIL' is defined but never used.","'TASKS_FETCH_REQUEST' is defined but never used.","'PROJECT_FETCH_SUCCESS' is defined but never used.","'AddEditProjectForm' is defined but never used.","'Tasks' is defined but never used.","'fetchProject' is defined but never used.","'updateProject' is defined but never used.","'fetchProjects' is defined but never used.","'addTask' is defined but never used.","'removeEmployeeLoading' is assigned a value but never used.","'removeEmployeeError' is assigned a value but never used.",["226"],"'deleteTask' is defined but never used.","'dispatch' is assigned a value but never used.","'user' is assigned a value but never used.","'updateTask' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'task'. Either include them or remove the dependency array.",["227"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [dispatch, project]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch]",{"range":"239","text":"240"},"Update the dependencies array to be: [dispatch, status, task]",{"range":"241","text":"242"},"Update the dependencies array to be: [dispatch, id]",{"range":"243","text":"244"},[1914,1923],"[dispatch, project]",[886,888],"[dispatch]",[906,914],"[dispatch, status, task]",[1097,1099],"[dispatch, id]"]